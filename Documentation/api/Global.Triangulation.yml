### YamlMime:ManagedReference
items:
- uid: Global.Triangulation
  commentId: T:Global.Triangulation
  id: Triangulation
  parent: Global
  children:
  - Global.Triangulation.triangulate(System.Collections.Generic.List{UnityEngine.Vector2},System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}},System.Single,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{UnityEngine.Vector3}@)
  langs:
  - csharp
  - vb
  name: Triangulation
  nameWithType: Triangulation
  fullName: Triangulation
  type: Class
  source:
    remote:
      path: Assets/nicoversity/polyextrude/_libraries/Triangle.NET/Triangulation.cs
      branch: master
      repo: https://doma_app:f1fe86723715ccbc7613afd67d521fe7c3e73db3@github.com/DomaPro/doma_app.git
    id: Triangulation
    path: ../Assets/nicoversity/polyextrude/_libraries/Triangle.NET/Triangulation.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public class Triangulation
    content.vb: Public Class Triangulation
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Global.Triangulation.triangulate(System.Collections.Generic.List{UnityEngine.Vector2},System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}},System.Single,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{UnityEngine.Vector3}@)
  commentId: M:Global.Triangulation.triangulate(System.Collections.Generic.List{UnityEngine.Vector2},System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}},System.Single,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{UnityEngine.Vector3}@)
  id: triangulate(System.Collections.Generic.List{UnityEngine.Vector2},System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}},System.Single,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{UnityEngine.Vector3}@)
  parent: Global.Triangulation
  langs:
  - csharp
  - vb
  name: triangulate(List<Vector2>, List<List<Vector2>>, Single, out List<Int32>, out List<Vector3>)
  nameWithType: Triangulation.triangulate(List<Vector2>, List<List<Vector2>>, Single, out List<Int32>, out List<Vector3>)
  fullName: Triangulation.triangulate(System.Collections.Generic.List<UnityEngine.Vector2>, System.Collections.Generic.List<System.Collections.Generic.List<UnityEngine.Vector2>>, System.Single, out System.Collections.Generic.List<System.Int32>, out System.Collections.Generic.List<UnityEngine.Vector3>)
  type: Method
  source:
    remote:
      path: Assets/nicoversity/polyextrude/_libraries/Triangle.NET/Triangulation.cs
      branch: master
      repo: https://doma_app:f1fe86723715ccbc7613afd67d521fe7c3e73db3@github.com/DomaPro/doma_app.git
    id: triangulate
    path: ../Assets/nicoversity/polyextrude/_libraries/Triangle.NET/Triangulation.cs
    startLine: 36
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nPerform triangulation for a custom (polygon) mesh.\n"
  example: []
  syntax:
    content: public static bool triangulate(List<Vector2> points, List<List<Vector2>> holes, float vertexY, out List<int> outIndices, out List<Vector3> outVertices)
    parameters:
    - id: points
      type: System.Collections.Generic.List{UnityEngine.Vector2}
      description: Vector2 List containing all the input vertices of the (polygon) mesh that the triangulation is performed on.
    - id: holes
      type: System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}}
      description: List of Vector2 List containing all the input vertex list representing holes in the input (polygon) mesh.
    - id: vertexY
      type: System.Single
      description: The input (polygon) mesh is created in 2D along the x- and z-dimension in the 3D space. This int parameter provides an option to set the polygon&apos;s y-dimension value.
    - id: outIndices
      type: System.Collections.Generic.List{System.Int32}
      description: Int List representing all indexes of the successful triangulation process.
    - id: outVertices
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: Vector3 List representing all 3D vertices of the successful triangulation process.
    return:
      type: System.Boolean
      description: 'boolean value indicating whether the triangulation was successful (true) or not (false) (note: error list not implemented yet, therefore the function always returns true by default in this implementation).'
    content.vb: Public Shared Function triangulate(points As List(Of Vector2), holes As List(Of List(Of Vector2)), vertexY As Single, ByRef outIndices As List(Of Integer), ByRef outVertices As List(Of Vector3)) As Boolean
  overload: Global.Triangulation.triangulate*
  nameWithType.vb: Triangulation.triangulate(List(Of Vector2), List(Of List(Of Vector2)), Single, ByRef List(Of Int32), ByRef List(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Triangulation.triangulate(System.Collections.Generic.List(Of UnityEngine.Vector2), System.Collections.Generic.List(Of System.Collections.Generic.List(Of UnityEngine.Vector2)), System.Single, ByRef System.Collections.Generic.List(Of System.Int32), ByRef System.Collections.Generic.List(Of UnityEngine.Vector3))
  name.vb: triangulate(List(Of Vector2), List(Of List(Of Vector2)), Single, ByRef List(Of Int32), ByRef List(Of Vector3))
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Triangulation.triangulate*
  commentId: Overload:Global.Triangulation.triangulate
  name: triangulate
  nameWithType: Triangulation.triangulate
  fullName: Triangulation.triangulate
- uid: System.Collections.Generic.List{UnityEngine.Vector2}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector2>
  nameWithType: List<Vector2>
  fullName: System.Collections.Generic.List<UnityEngine.Vector2>
  nameWithType.vb: List(Of Vector2)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector2)
  name.vb: List(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: UnityEngine.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: UnityEngine.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{UnityEngine.Vector2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Vector2>>
  nameWithType: List<List<Vector2>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<UnityEngine.Vector2>>
  nameWithType.vb: List(Of List(Of Vector2))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of UnityEngine.Vector2))
  name.vb: List(Of List(Of Vector2))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: UnityEngine.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: UnityEngine.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{UnityEngine.Vector3}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<UnityEngine.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
